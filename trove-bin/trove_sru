#!/usr/bin/env ruby
#
# Utility to test the retrieval of a NLA Party Identifier
# from Trove.
#
# e.g. trove_sru -v mirage.cmm.uq.edu.au/user/1
#
# Copyright (C) 2012, The University of Queensland.
#----------------------------------------------------------------

$VERBOSE = true

$LOAD_PATH.unshift File.dirname(__FILE__) + '/../lib'

require 'bundler/setup';
require 'sru'

require 'optparse'
require 'miletus/trove_sru'

#----------------------------------------------------------------

def process_command_line

  # Specify command line options

  options = {}
  opt_parser = OptionParser.new do |opt|
    opt.banner = "Usage: PROG [options] {identifierToSearchFor}"

    opt.separator "Options:"

    opt.on("-t", "--type str",
           "identifier type (default: match any type)") do |param|
      options[:type] = param
    end

    opt.on("-d", "--demo", "use Trove Test instead of Trove production") do
      options[:demo] = true
    end

    opt.on("-v", "--verbose", "verbose output: show query information") do
      options[:verbose] = true
    end

    opt.on("-h", "--help", "show help message") do
      $stderr.puts opt_parser
      exit 0
    end
  end
  opt_parser.version = 1.0
  opt_parser.release = 1

  # Parse parameters

  begin
    opt_parser.parse!
  rescue OptionParser::InvalidOption => e
    $stderr.puts "Usage error: #{e.message} (--help for help)"
    exit 2
  rescue OptionParser::InvalidArgument => e
    $stderr.puts "Usage error: #{e.message}"
    exit 2
  end

  # Defaults (if needed)

  if ! options[:type]
    options[:type] = nil
  end

  if ARGV.empty?
    $stderr.puts "Usage error: missing search value (-h for help)"
    exit 2
  end

  return [ ARGV, options[:type], options[:demo], options[:verbose] ]

end # def process_command_line

#----------------------------------------------------------------

def main

  ids, type, demo, verbose = process_command_line

  ids.each do |value|
    if verbose
      puts (demo ? 'Querying Trove Test' : 'Querying Trove (production)')
      print "  Identifier type = "
      print type ? type : '<any type>'
      puts
      puts "  Identifier value = #{value}"
    end

    begin
      nla_id = TroveSRU.lookup_nla_id(type, value, demo)

      if nla_id
        puts nla_id
        return 0
      else
        puts '<no match>'
        return 1
      end

    rescue TroveSRU::DataError => e
      $stderr.puts "Error: #{e}"
      return 1
    rescue SRU::Exception => e
      $stderr.puts "Error: #{e}"
      return 1
    end

  end
end

exit main

#EOF
